Notes for iOS -> Android conversion
===================================

Step 0
------

+ Copy and paste iOS version of file into Android project
+ Include entry in Tools/AppDelegate+RegisterTypes.cs

Step 1
------

+ The compiler is your friend - try to build!

+ My goal in this step is to get something compiling.  It would be great if I
could have something show up on the screen!  My strategy is to comment out 
problems at this stage.  You can use #warning to indicate areas to come back to.

Problems:

+ The "using" section -  My recommendation is to remove the 
unused items (the greyed out ones) and also remove the ones causing errors 
(these are the iOS specific ones).

+ [Foundation.Preserve] attributes - These are iOS specific and 
can also be removed. 

+ "new MobileCustomerSearchControlView" error - I think
this is because whatever view this is derived from is iOS specific.  I'm not 
going to comment this out because without it, the custom control will do 
nothing!

+ CdlViewController events - there are events that our CdlViewController for 
Android does not implement.  In looking at the function that these call, I can
see that it is #if'ed out.  I suspect that these are not important, but will 
just comment for now.

+ NSTimer (iOS specific) error - I'm not sure what the equivalent is
in Android, so I'm going to comment it out for now.  This means also commenting 
out things that use it.  To minimize the "ripple effect" I tend to comment out 
the content of functions, not the functions themselves. 

+ AudioServices (iOS specific) - again comment out for now.  To be honest, I 
don't think I'm going to convert this at all!

+ DrteView error on MobileCustomerSearchControlView - here I need to know a 
suitable replacement!  Again I could just comment, but then I get nothing 
showing up.  If I think about this control, I know that this outer view contains
a vertical list of children (each of the customer types) and I know that Android
has pre-built "layouts" 
(https://developer.android.com/guide/topics/ui/declaring-layout.html).  
It seems to me that a vertical linear layout would be the best choice.  Note 
that, as for the iOS app, the Framework tends to defined "Drte" subclasses of
the ones from Mono.droid, so I will derive from DrteLinearLayout.  I'll also
set the orientation to vertical in the constructor.

+ IntPtr handle constructor error - this is a special Xamarin.iOS contructor.  
The equivalent is a constructor that takes 
(IntPtr handle, Android.Runtime.JniHandleOwnership transfer)

+ Detach error - detaching was a "special" memory management technique
implemented in the iOS app.  We don't have an equivalent in the Android app.  My
recommendation is to comment these methods initially so that you can return
later to see if there is some cleanup you need to do in Dispose.

+ view.Frame error - in iOS (certainly in our app) there is a lot of explicit
positioning of views.  With the built-in layouts available in Android (plus
the fact that there are lots of different screen sizes) we want to avoid setting
explicit frames.  The linear layout takes care of stacking its children, so 
I comment out frame setting.  In this case, I think I will ultimately be able
to remove this code altogether.

+ UserInteractionEnabled error - again iOS specific and comment for now.

+ AddSubview error - this requires a bit of Android knowledge (or a bit of 
Googling), but the equivalent is AddView, so I change it.  You will temporarily
introduce another error because again CustomerSearchTypeView is probably
deriving from something iOS specific.

+ SetNeedsLayout/SetNeedsDisplay - these are again to do with flagging views 
for laying out or redrawing.  Comment out because I don't know if they are
going to be needed in Android.

+ CreateLayoutEngine error - more iOS layout stuff!  Again the built-in 
Android layouts will take care of this.

+ DrteView error on CustomerSearchTypeView - again I'm looking for what to 
replace DrteView with.  In Android, any time you have a "view" that contains
other views, think "layout".  Here again, because I have an idea about what
the final result should look like (i.e. each "row" in the search control
contains an image, some text, a checkbox horizontally) then another linear
layout seems a good choice.  Note that by using LayoutParameters in a linear
layout we can achieve things like children dynamically resizing to fill the 
avaiable space (I'm thinking of the text in this case).  So once again derive
from DrteLinearLayout and set orientation to 

+ UILabel error - you get to know that UILabel -> Android.Widget.TextView

+ UIImageView error - you also get to know that 
UIImageView -> Android.Widget.ImageView

+ BackgroundColor error - just a hint, but a lot of times Android has explicit 
Set/Get methods instead of properties.  I tried it here and SetBackgroundColor
works!  Otherwise I would have commented and come back later.

+ TouchDown event error - not sure, so I comment.

+ Draw method error - Ick!  This control has custom drawing code!!! Definitely
comment this stuff for later.  Luckily, only looks like it's drawing divider
lines.

+ UIImage error - another standard substitution 
UIImage -> Android.Graphics.Drawables.Drawable

+ ImageView doesn't have Image property - but as you might expect if UIImage -> 
Drawable, then ImageView has a Drawable property.

+ DetachView error - as mentioned above we don't have the "Detach" mechanism in
Android.  However, I do know that one of the functions of DetachView was to 
remove the view from its parent... and there is a RemoveFromSuperview extension
method.

+ Image property set error - here I try to change the property set to Drawable.
There is no property set for Drawable, but there is a SetImageDrawable function.

+ DetachableImageView error - there is no DetachableImageView in framework, so 
I'm going to create an ImageView directly.  Note that all views in Android take
a context as an argument in their constructor.  Typically, if the thing doing
the creation is also a view, then you can just pass the Context property.  In
order to also set the initial image, I have to also call SetImageDrawable.

+ TextColor property error - let's try SetTextColor!

+ Font property error - let's try SetFont!

+ TitleModeSizing/NormalModeSizing - this all looks like code to do with sizing/
layout.  Let's comment out.

+ SizeThatFits error - again code to figure out sizing.  We'll talk later about
LayoutParameters which have built-in things like WrapContent/MatchParent which
in a lot of cases remove the need for custom code.

+ LayoutSubviews error - for all the above reasons, it's gone!  Well at least 
commented out.

+ SelectAllButton calling base error - DetachableButton does not have a 
constructor that takes a rect (again typically no explicit sizing in Android).
We will call the default constructor with no arguments.  Note that although I 
said above that "Detach*" no longer exists, we do preserve some classes to make 
conversion easier!

Layer.BackgroundColor error - iOS has the concept of Layers associated with
views.  I am not aware of anything similar in Android, so I'm commenting it
out for now.  I'll figure out it's purpose later.

SetTitle error - the Android button has no SetTitle method (in iOS this sets
the text of the button).  I could just comment this, but if it's a simple change
I'd like to make it so I can see something in my button.  Ooh, there's a Text
property!


Step 2
------

+ At this point, you have lots of choices about what to tackle next.  Obviously,
the layout of the control needs work, but I think I would actually like to get
it doing something.  I know, from running the iOS control, that it is the timer
that actually does the work of refreshing the search, so that might be a good
place to start.

+ Our problem is that it is the NSTimer that does the work in iOS (and that is
iOS specific).  We need to find something equivalent in Android.  Before I
start Googling (and possibly reinventing the wheel) I'm going to do a "Find
In Files" in the MI-droid project to see if I can find something similar.  I'm
going to search for "timer" and be looking for another control that's doing 
something with it.

+ I get lots of results, but a lot of it is commented out code.  As I scroll
down the results, I see something from CdlGrid:

First the declaration...

            IDisposable _stopDeletingTimer;

Next, what looks like cleaning up the timer...

            _stopDeletingTimer?.Dispose();
            _stopDeletingTimer = null;

And last, but not least, setting up the timer...

            _stopDeletingTimer = AppDelegate.Schedule(10, () => {
                StopDeleting();
            });

Obviously, it is not always going to be this easy, but it is always worth 
looking around before giving up.  Things you find this way you will remember 
(or at least be able to find again).

+ So given the above, I'm going to start uncommenting the timer related code
in the control, starting with the declaration:

	    NSTimer _timer; 

	becomes

	    IDisposable _timer;

+ Next the ClearTimer method.  We can replace:

	    if (_timer.IsValid)
	        _timer.Invalidate();

	    _timer.Dispose();

	with

	    _timer?.Dispose();


+ Now the CreateTimer method.  We can replace:

	    _timer = NSTimer.CreateScheduledTimer(_timerDelay, (t) =>
	    {
	        RefreshCustomerSelection();
	    });

    with

        _timer = AppDelegate.Schedule(_timerDelay, () =>
        {
            RefreshCustomerSelection();
        });

+ And inside the RefreshCustomerSelection method we need to reconstruct the if
test:

        if (!force /*&& (_timer == null || !_timer.IsValid)*/)

    becomes

        if (!force && _timer == null)

    Note here that I have to "know" that Android timers don't have a notion
    of being valid, but I can infer that from the CdlGrid usage.



Step 3
------

+ To complete the interactivity, let's get the Select All/Select None buttons 
working.

+ The key thing here is to hook up something when the button is tapped.  In iOS,
this was by hooking to the TouchDown event.  With the help of Intellisense, I 
find that the Android button has a Click event - this sounds promising!

        _selectAllButton.TouchDown += Handle_selectAllButtonTouchDown;

    becomes

        _selectAllButton.Click += Handle_selectAllButtonTouchDown;



Step 4
------

+ OK, we've been avoiding it, but now we have to start tackling how the control
looks!  Again this is a matter of preference for what to do first, but I think
the most glaring thing is the horizontal arrangement of the views in each row.

+ First, it looks like all of the views need a bit of padding around them, so 
that they are not touching and then the text view should expand to fill the 
remaining space in each row.  

+ This is where layout parameters come into play.  Each type of layout has their
own type of layout parameters.  For us, since our rows are LinearLayouts, we 
will be using LinearLayout.LayoutParams.  The way this works is you create the 
LinearLayout.LayoutParams and assign them to each child's LayoutParameters 
property.

+ There are lots of options and we will only be using a few.  Visit 
https://developer.android.com/guide/topics/ui/layout/linear.html

+ First, I will deal with the images/checks - I want them to be sized to fit the 
image, but with a bit of padding around.

    // Create layout parameters using "WrapContent" for width and height.  This
    // means the view will be sized to fit the content exactly
	var layoutParameters = new Android.Widget.LinearLayout.LayoutParams(
        Android.Views.ViewGroup.LayoutParams.WrapContent, 
        Android.Views.ViewGroup.LayoutParams.WrapContent);

    // Add some margins.  Note the use of the convenience function px().  This
    // converts from device independent sizes to pixels.  This ensures the 
    // margins are the same physical size even on devices with high-DPI screens. 
	layoutParameters.SetMargins(8.px(), 8.px(), 8.px(), 8.px());

    // Layout gravity affects the child view at 90 degrees to the orientation
    // of the linear layout i.e. in this case, because our layout direction
    // is horizontal, the center here means center vertically.
	layoutParameters.Gravity = Android.Views.GravityFlags.Center;

    // Finally, assign the parameters to the child view
	_selectCust.LayoutParameters = layoutParameters;

+ Next, I want to deal with the text views.  Here again I want the view to be 
sized based on the content, but I also want it to stretch horizontally to fill
the available space.  I achieve this by passing a weight value to the linear
layout parameters constructor:

    var layoutParameters = new Android.Widget.LinearLayout.LayoutParams(
        Android.Views.ViewGroup.LayoutParams.WrapContent, 
        Android.Views.ViewGroup.LayoutParams.WrapContent, 
        1f);    // Weight
    layoutParameters.SetMargins(8.px(), 8.px(), 8.px(), 8.px());
    layoutParameters.Gravity = Android.Views.GravityFlags.Center;
    _custTypeLabelView.LayoutParameters = layoutParameters;

Because, in this case we only have one view we want to stretch we can specify
any non-zero value for weight.  If there were mutiple views to stretch, the 
relative values of the weights are used to distribute the extra space.

+ For the Select All/Select None buttons I use similar layout parameters, just 
without margins:

    var layoutParameters = new Android.Widget.LinearLayout.LayoutParams(
        Android.Views.ViewGroup.LayoutParams.WrapContent, 
        Android.Views.ViewGroup.LayoutParams.WrapContent);
    layoutParameters.Gravity = Android.Views.GravityFlags.Center;
    _selectAllButton.LayoutParameters = layoutParameters;



Step 5
------

+ Let's just clear up some minor cosmetics.

+ First, the text of each customer type wraps and makes the rows irregular.  
Comparing to the iOS app we see that the text should be a single line and use
an ellipsis.  This requires a bit of research, but we can achieve the same with:

    _custTypeLabelView.SetMaxLines(1);
    _custTypeLabelView.Ellipsize = Android.Text.TextUtils.TruncateAt.End;

+ Next the Select All/None buttons in iOS have no button chrome.  Again this 
 requires a bit of experimentation, but this does it:

    this.SetBackgroundColor(Android.Graphics.Color.Transparent);
    this.SetTextColor(StyleGuide.MCSC_Default_LabelTextColor);
    this.SetFont(StyleGuide.MCSC_Default_LabelFont);

